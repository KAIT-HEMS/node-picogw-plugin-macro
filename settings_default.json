{
	"OnDemand": {
		"code": "///========================\n// getArgs() receives GET argument of the call.\n// Eg. /v1/macro/run?a=b&c=d        will make        getArgs() to return {a:'b',c:'d'}\nprint( getArgs() );  // print() amounts to console.log()\n\n\n\n\n///========================\n// You can return JSON object from the macro by calling resolve({...}) or reject({...}).\n\n\n\n\n///========================\n// How to handle persistent data across multiple calls with the help of db plugin:\n// (This example shows the number of calls. (Updated at each call) \n\n// Load persistent data from db plugin. Other API can be called by callProc() method.\nconst KEYNAME = 'runScriptCallCount' ;\nlet countVal = await callProc({method:'GET',path:'/v1/db/'+KEYNAME});\ncountVal = countVal.value || 0 ;    // If no data is stored yet, set the call number as 0.\nprint( 'Call ' + (++countVal) );        // Prints the call count to the command line\nawait callProc({method:'POST' ,path:`/v1/db/${KEYNAME }` ,args:{value:countVal} }); // Save new data into db plugin\n\n\n\n\n///========================\n// Check powers of ECHONET Lite devices\nconst CHECK_DEVS = ['AirConditioner','GenericIllumination'] ;\n// Use regular expression to check multiple devices at once\nconst CHECK_PATH = '/v1/echonet/(' + CHECK_DEVS.join('|') + ')_.+/operatingstate' ;\nre = await callProc({method:'GET',path:CHECK_PATH}).catch(reject);\n\n// addLog(`Call ${countVal}`, re);  // Append to log data within macro plugin, which can be accessed by /v1/macro/log\n\nfor( const path in re ){\n  if( re[path].value == 'on' ){\n    resolve('on'); // returns 'on' mode if at least one device is on.\n    return ;\n  }\n}\n\nresolve('off'); // Otherwise (Everything is off) the mode is 'off'"
	},
	"Periodical": {
		"code": "// pollScript handler does not have resolve/reject function.\n// Rather, call addLog('KEY','VALUE in string'); as many times as you want.\n\nprint('adding log(s) in macro plugin');\n\n// Check whole mode\nlet re = await callProc({method:'GET',path:'/v1/macro/run'}).catch(e=>{});\naddLog('macro execution result',re.value);\n\n// Check server status\nre = await callProc({method:'GET',path:'/v1/admin/server_status/'}).catch(e=>{});\naddLog('server status',JSON.stringify(re.result));\n",
		"pollInterval": -1,
		"pollLogEntryMax": 300
	}
}